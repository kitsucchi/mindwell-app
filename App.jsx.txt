import React, { useState, createContext, useContext, useMemo, useEffect } from 'react';
import { HashRouter, Routes, Route, Link, Outlet, useNavigate, useLocation } from 'react-router-dom';
import { BarChart, Bar, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';
import { Sun, Moon, Laptop, Smile, Meh, Frown, Plus, MoreHorizontal, Trash2, Edit, X, MessageSquare, Heart, Settings as SettingsIcon, LayoutDashboard, BookUser, Users, BarChart3, LogOut } from 'lucide-react';
import { Toaster, toast } from 'sonner';

// UTILITIES & MOCK DATA
// =================================================================================

// Utility for combining Tailwind classes
const cn = (...classes) => classes.filter(Boolean).join(' ');

// Mock Data
const initialJournalEntries = [
    { id: 1, title: "First Day of Classes", content: "Felt a mix of excitement and nerves today. The campus is huge, but I managed to find all my classes. The new data structures course looks challenging but interesting.", mood: "Happy", date: "2024-08-12" },
    { id: 2, title: "Midterm Stress", content: "The pressure is really starting to build up. I have three midterms next week and I feel a bit overwhelmed. Trying to create a study schedule to manage my time better.", mood: "Sad", date: "2024-10-20" },
    { id: 3, title: "Quiet Weekend", content: "Just a calm weekend. Didn't do much, just read a book and caught up on some shows. It was nice to have a break from the usual hustle.", mood: "Neutral", date: "2024-11-05" },
];

const initialCommunityPosts = {
    'general-chat': [
        { id: 1, author: "Anonymous Bear", content: "Anyone else finding it hard to make friends in a new city? It's been a few months and I'm still feeling a bit lonely.", likes: 15, comments: [{ author: "Anonymous Fox", content: "I feel you! It takes time. Have you tried joining any clubs?" }, { author: "Anonymous Owl", content: "Same here. Let's connect!" }] },
        { id: 2, author: "Anonymous Owl", content: "What's everyone's favorite study spot on campus? The library is always so packed.", likes: 22, comments: [] },
    ],
    'exam-stress': [
        { id: 3, author: "Anonymous Capybara", content: "Finals are coming and I'm already panicking. Any tips for staying calm and focused?", likes: 45, comments: [{ author: "Anonymous Bear", content: "Deep breathing exercises have been a lifesaver for me. Also, study groups!" }] },
    ],
    'campus-life': [],
};

const initialMoodData = [
  { name: 'Mon', mood: 3 }, { name: 'Tue', mood: 2 }, { name: 'Wed', mood: 2 },
  { name: 'Thu', mood: 3 }, { name: 'Fri', mood: 1 }, { name: 'Sat', mood: 3 },
  { name: 'Sun', mood: 2 },
];

// CONTEXT PROVIDERS
// =================================================================================

// Theme Context
const ThemeContext = createContext({
  theme: 'light',
  setTheme: () => {},
});

const ThemeProvider = ({ children }) => {
  const [theme, setTheme] = useState(localStorage.getItem('vite-ui-theme') || 'light');

  useEffect(() => {
    const root = window.document.documentElement;
    root.classList.remove('light', 'dark');
    if (theme === 'system') {
      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
      root.classList.add(systemTheme);
    } else {
      root.classList.add(theme);
    }
    localStorage.setItem('vite-ui-theme', theme);
  }, [theme]);

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};

// Mood Context
const MoodContext = createContext(null);

const MoodProvider = ({ children }) => {
    const [moodLog, setMoodLog] = useState(initialMoodData.map(d => d.mood));

    const logMood = (moodValue) => {
        setMoodLog(prevLog => [...prevLog, moodValue]);
        toast.success("Mood logged successfully!");
    };
    
    const moodValueMapping = { 1: 'Sad', 2: 'Neutral', 3: 'Happy' };
    const moodStats = useMemo(() => {
        if (moodLog.length === 0) return { avg: 'N/A', mostFrequent: 'N/A', streak: 0 };
        
        const total = moodLog.reduce((sum, val) => sum + val, 0);
        const avgValue = total / moodLog.length;
        const avg = avgValue < 1.5 ? 'Sad' : avgValue < 2.5 ? 'Neutral' : 'Happy';

        const counts = moodLog.reduce((acc, val) => {
            acc[val] = (acc[val] || 0) + 1;
            return acc;
        }, {});
        const mostFrequentVal = Object.keys(counts).reduce((a, b) => counts[a] > counts[b] ? a : b);
        const mostFrequent = moodValueMapping[mostFrequentVal];

        let streak = 0;
        for (let i = moodLog.length - 1; i >= 0; i--) {
            if (moodLog[i] === 3) { // 3 is 'Happy'
                streak++;
            } else {
                break;
            }
        }

        return { avg, mostFrequent, streak };
    }, [moodLog]);


    const chartData = useMemo(() => {
        return moodLog.map((mood, index) => ({ name: `Day ${index + 1}`, mood }));
    }, [moodLog]);

    return (
        <MoodContext.Provider value={{ moodLog, logMood, moodStats, chartData }}>
            {children}
        </MoodContext.Provider>
    );
};

const useMood = () => useContext(MoodContext);

// CUSTOM HOOKS
// =================================================================================
const useAuth = () => {
    // Mock auth hook
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const navigate = useNavigate();

    const login = () => {
        setIsAuthenticated(true);
        navigate('/app/dashboard');
    };

    const logout = () => {
        setIsAuthenticated(false);
        navigate('/login');
    };
    
    return { isAuthenticated, login, logout };
};

// SHARED UI COMPONENTS
// =================================================================================

const Card = ({ className, children }) => (
  <div className={cn("rounded-xl border bg-card text-card-foreground shadow", className)}>
    {children}
  </div>
);
const CardHeader = ({ className, children }) => <div className={cn("flex flex-col space-y-1.5 p-6", className)}>{children}</div>;
const CardTitle = ({ className, children }) => <h3 className={cn("font-semibold leading-none tracking-tight", className)}>{children}</h3>;
const CardDescription = ({ className, children }) => <p className={cn("text-sm text-muted-foreground", className)}>{children}</p>;
const CardContent = ({ className, children }) => <div className={cn("p-6 pt-0", className)}>{children}</div>;
const CardFooter = ({ className, children }) => <div className={cn("flex items-center p-6 pt-0", className)}>{children}</div>;

const Button = ({ variant = 'default', size = 'default', className, children, ...props }) => {
  const baseClasses = "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50";
  const variants = {
    default: "bg-primary text-primary-foreground shadow hover:bg-primary/90",
    destructive: "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
    outline: "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
    secondary: "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
    ghost: "hover:bg-accent hover:text-accent-foreground",
    link: "text-primary underline-offset-4 hover:underline",
  };
  const sizes = {
    default: "h-9 px-4 py-2",
    sm: "h-8 rounded-md px-3 text-xs",
    lg: "h-10 rounded-md px-8",
    icon: "h-9 w-9",
  };
  return <button className={cn(baseClasses, variants[variant], sizes[size], className)} {...props}>{children}</button>;
};

const Input = ({ className, ...props }) => (
    <input className={cn("flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50", className)} {...props} />
);

const Label = ({ className, ...props }) => (
    <label className={cn("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70", className)} {...props} />
);

const Textarea = ({ className, ...props }) => (
    <textarea className={cn("flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50", className)} {...props} />
);

const Dialog = ({ open, onOpenChange, children }) => {
    if (!open) return null;
    return (
        <div className="fixed inset-0 z-50 bg-black/60 flex items-center justify-center" onClick={() => onOpenChange(false)}>
            <div className="relative bg-background rounded-lg shadow-lg w-full max-w-lg p-6" onClick={e => e.stopPropagation()}>
                {children}
            </div>
        </div>
    );
};

const Sheet = ({ open, onOpenChange, children, side = 'right' }) => {
    if (!open) return null;
    const sideClasses = {
        right: 'inset-y-0 right-0',
        left: 'inset-y-0 left-0',
    };
    return (
        <div className="fixed inset-0 z-50 bg-black/60" onClick={() => onOpenChange(false)}>
            <div className={cn("fixed z-50 bg-background shadow-lg w-full md:w-1/3", sideClasses[side])} onClick={e => e.stopPropagation()}>
                {children}
            </div>
        </div>
    );
};

const AlertDialog = ({ open, onOpenChange, title, description, onConfirm }) => {
    if (!open) return null;
    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <div className="space-y-4">
                <h3 className="text-lg font-semibold">{title}</h3>
                <p className="text-sm text-muted-foreground">{description}</p>
                <div className="flex justify-end space-x-2">
                    <Button variant="outline" onClick={() => onOpenChange(false)}>Cancel</Button>
                    <Button variant="destructive" onClick={() => { onConfirm(); onOpenChange(false); }}>Confirm</Button>
                </div>
            </div>
        </Dialog>
    );
};

const Tabs = ({ children, defaultValue, onValueChange }) => {
    const [activeTab, setActiveTab] = useState(defaultValue);
    const handleTabClick = (value) => {
        setActiveTab(value);
        if (onValueChange) onValueChange(value);
    };

    const childrenWithProps = React.Children.map(children, child => {
        if (child.type === TabsList) {
            return React.cloneElement(child, { activeTab, onTabClick: handleTabClick });
        }
        if (child.type === TabsContent && child.props.value === activeTab) {
            return child;
        }
        return null;
    });

    return <div>{childrenWithProps}</div>;
};

const TabsList = ({ children, activeTab, onTabClick }) => (
    <div className="inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground mb-4">
        {React.Children.map(children, child => React.cloneElement(child, { activeTab, onTabClick }))}
    </div>
);

const TabsTrigger = ({ children, value, activeTab, onTabClick }) => (
    <button
        onClick={() => onTabClick(value)}
        className={cn(
            "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
            activeTab === value ? "bg-background text-foreground shadow" : "text-muted-foreground"
        )}
    >
        {children}
    </button>
);

const TabsContent = ({ children, value }) => <div>{children}</div>;

const Avatar = ({ children, className }) => (
    <div className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full items-center justify-center bg-muted", className)}>
        {children}
    </div>
);

const DropdownMenu = ({ trigger, children }) => {
    const [isOpen, setIsOpen] = useState(false);
    const ref = React.useRef(null);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (ref.current && !ref.current.contains(event.target)) {
                setIsOpen(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    return (
        <div className="relative inline-block text-left" ref={ref}>
            <div onClick={() => setIsOpen(!isOpen)}>
                {trigger}
            </div>
            {isOpen && (
                <div className="origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-lg bg-popover ring-1 ring-black ring-opacity-5 focus:outline-none">
                    <div className="py-1" role="menu" aria-orientation="vertical">
                        {React.Children.map(children, child => React.cloneElement(child, { onClick: () => { child.props.onClick(); setIsOpen(false); } }))}
                    </div>
                </div>
            )}
        </div>
    );
};

const DropdownMenuItem = ({ children, onClick, className }) => (
    <a href="#" className={cn("block px-4 py-2 text-sm text-popover-foreground hover:bg-accent", className)} onClick={(e) => { e.preventDefault(); onClick(); }}>
        {children}
    </a>
);

// LAYOUT COMPONENTS
// =================================================================================

const MindWellIcon = (props) => (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="1.5"
      strokeLinecap="round"
      strokeLinejoin="round"
      {...props}
    >
      <path d="M11.995 20.826a1.493 1.493 0 0 1-1.06-.44l-6.55-6.55a5.5 5.5 0 0 1 7.779-7.779l.831.831.831-.831a5.5 5.5 0 0 1 7.778 7.779l-6.55 6.55a1.493 1.493 0 0 1-1.06.44Z" />
      <path d="M14.5 9.5c-1.25 1.25-2.5 1.25-3.75 0S8.25 8.25 7 9.5" />
    </svg>
);

const Header = () => (
  <header className="sticky top-0 z-40 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
    <div className="container flex h-14 items-center">
      <Link to="/" className="mr-6 flex items-center space-x-2">
        <MindWellIcon className="h-6 w-6 text-primary" />
        <span className="font-bold">MindWell</span>
      </Link>
      <nav className="hidden md:flex items-center space-x-6 text-sm font-medium">
        <Link to="/about" className="transition-colors hover:text-foreground/80 text-foreground/60">Our Mission</Link>
        <Link to="/how-it-works" className="transition-colors hover:text-foreground/80 text-foreground/60">How It Works</Link>
      </nav>
      <div className="flex flex-1 items-center justify-end space-x-4">
        <Link to="/login">
            <Button variant="ghost">Log In</Button>
        </Link>
        <Link to="/signup">
            <Button>Sign Up</Button>
        </Link>
      </div>
    </div>
  </header>
);

const Footer = () => (
  <footer className="py-6 md:px-8 md:py-0 border-t">
    <div className="container flex flex-col items-center justify-between gap-4 md:h-24 md:flex-row">
      <p className="text-center text-sm leading-loose text-muted-foreground md:text-left">
        Built with ❤️ for student well-being. © {new Date().getFullYear()} MindWell Inc.
      </p>
    </div>
  </footer>
);

const PublicLayout = () => (
  <div className="relative flex min-h-screen flex-col">
    <Header />
    <main className="flex-1"><Outlet /></main>
    <Footer />
  </div>
);

const AppLayout = () => {
    const navigate = useNavigate();
    const location = useLocation();
    const { theme, setTheme } = useContext(ThemeContext);
    
    const navItems = [
        { href: '/app/dashboard', icon: LayoutDashboard, label: 'Dashboard' },
        { href: '/app/journal', icon: BookUser, label: 'Journal' },
        { href: '/app/community', icon: Users, label: 'Community' },
        { href: '/app/insights', icon: BarChart3, label: 'Insights' },
        { href: '/app/settings', icon: SettingsIcon, label: 'Settings' },
    ];

    const isActive = (path) => location.pathname.startsWith(path);

    return (
        <div className="grid min-h-screen w-full lg:grid-cols-[280px_1fr]">
            <div className="hidden border-r bg-muted/40 lg:block">
                <div className="flex h-full max-h-screen flex-col gap-2">
                    <div className="flex h-14 items-center border-b px-6">
                        <Link to="/" className="flex items-center gap-2 font-semibold">
                            <MindWellIcon className="h-6 w-6 text-primary" />
                            <span>MindWell</span>
                        </Link>
                    </div>
                    <div className="flex-1 overflow-auto py-2">
                        <nav className="grid items-start px-4 text-sm font-medium">
                            {navItems.map(item => (
                                <Link key={item.label} to={item.href} className={cn("flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary", isActive(item.href) && "bg-muted text-primary")}>
                                    <item.icon className="h-4 w-4" />
                                    {item.label}
                                </Link>
                            ))}
                        </nav>
                    </div>
                </div>
            </div>
            <div className="flex flex-col">
                <header className="flex h-14 items-center gap-4 border-b bg-muted/40 px-6">
                    <div className="lg:hidden">
                        {/* Mobile Nav Trigger could go here */}
                    </div>
                    <div className="w-full flex-1">
                        {/* Optional: Search Bar */}
                    </div>
                    <DropdownMenu trigger={
                        <Button variant="ghost" size="icon" className="rounded-full">
                            <Avatar>
                                <span className="font-semibold">A</span>
                            </Avatar>
                        </Button>
                    }>
                        <DropdownMenuItem onClick={() => navigate('/app/settings')}>Settings</DropdownMenuItem>
                        <DropdownMenuItem onClick={() => navigate('/login')}>
                            <LogOut className="mr-2 h-4 w-4" />
                            <span>Log out</span>
                        </DropdownMenuItem>
                    </DropdownMenu>
                </header>
                <main className="flex flex-1 flex-col gap-4 p-4 md:gap-8 md:p-6">
                    <Outlet />
                </main>
            </div>
        </div>
    );
};


// PUBLIC PAGES
// =================================================================================

const HomePage = () => (
  <div className="container">
    <section className="space-y-6 pb-8 pt-6 md:pb-12 md:pt-10 lg:py-32">
      <div className="container flex max-w-[64rem] flex-col items-center gap-4 text-center">
        <h1 className="font-bold text-3xl sm:text-5xl md:text-6xl lg:text-7xl">
          A Safe Space for Your Mind
        </h1>
        <p className="max-w-[42rem] leading-normal text-muted-foreground sm:text-xl sm:leading-8">
          MindWell is an anonymous, supportive community for university students. Track your mood, journal your thoughts, and connect with peers who understand.
        </p>
        <div className="space-x-4">
            <Link to="/signup"><Button size="lg">Get Started</Button></Link>
            <Link to="/how-it-works"><Button size="lg" variant="outline">Learn More</Button></Link>
        </div>
      </div>
    </section>
    <section className="grid grid-cols-1 md:grid-cols-3 gap-6 my-12">
        <Card>
            <CardHeader><CardTitle>Private Journal</CardTitle></CardHeader>
            <CardContent><p className="text-muted-foreground">A secure, encrypted space for your thoughts. No one sees your entries but you.</p></CardContent>
        </Card>
        <Card>
            <CardHeader><CardTitle>Anonymous Community</CardTitle></CardHeader>
            <CardContent><p className="text-muted-foreground">Share experiences and find support in a judgment-free zone. Your identity is always protected.</p></CardContent>
        </Card>
        <Card>
            <CardHeader><CardTitle>Mood Tracker</CardTitle></CardHeader>
            <CardContent><p className="text-muted-foreground">Log your daily mood and gain insights into your emotional well-being over time.</p></CardContent>
        </Card>
    </section>
    <section className="my-12 text-center">
        <h2 className="text-3xl font-bold mb-8">What Students Are Saying</h2>
        <div className="max-w-3xl mx-auto space-y-8">
            <blockquote className="border-l-4 pl-4 italic text-muted-foreground">
                "MindWell helped me realize I wasn't alone in feeling stressed about exams. The community is so supportive."
                <cite className="block not-italic mt-2 font-semibold">- Anonymous Fox</cite>
            </blockquote>
            <blockquote className="border-l-4 pl-4 italic text-muted-foreground">
                "Journaling here has become a daily ritual. It's so helpful to get my thoughts out of my head and onto the screen."
                <cite className="block not-italic mt-2 font-semibold">- Anonymous Bear</cite>
            </blockquote>
        </div>
    </section>
  </div>
);

const AboutPage = () => (
    <div className="container max-w-4xl py-12">
        <div className="space-y-4">
            <h1 className="text-4xl font-bold">Our Mission</h1>
            <p className="text-xl text-muted-foreground">To create a world where every student has the tools and support they need to thrive mentally and emotionally.</p>
        </div>
        <div className="prose dark:prose-invert mt-8 max-w-none">
            <p>University life is a time of immense growth, but it can also be a period of significant stress, anxiety, and pressure. We believe that mental health is just as important as physical health, yet it's often stigmatized and overlooked. MindWell was born from a simple idea: what if students had a safe, anonymous, and accessible space to focus on their mental well-being?</p>
            <h2>Our Commitment to Privacy</h2>
            <p>Privacy isn't just a feature; it's our foundation. We understand that to truly open up, you need to feel safe. That's why your journal is private to you, and your participation in the community is always anonymous. We don't track personal data to sell, and we are committed to protecting your identity.</p>
            <h2>Aligning with UN's SDG 3</h2>
            <p>Our work is proudly aligned with the United Nations' Sustainable Development Goal 3: Good Health and Well-being. Specifically, we aim to contribute to Target 3.4, which seeks to "promote mental health and well-being." By providing a free, accessible platform, we hope to reduce the barriers that prevent students from seeking support and engaging in self-care practices.</p>
        </div>
    </div>
);

const HowItWorksPage = () => (
    <div className="container max-w-4xl py-12">
        <div className="text-center space-y-4 mb-12">
            <h1 className="text-4xl font-bold">How MindWell Works</h1>
            <p className="text-xl text-muted-foreground">A simple, three-step approach to better mental well-being.</p>
        </div>
        <div className="space-y-16">
            <div className="flex flex-col md:flex-row items-center gap-8">
                <div className="flex-1 space-y-4">
                    <h2 className="text-3xl font-bold"><span className="text-primary">1.</span> Log Your Mood</h2>
                    <p className="text-muted-foreground">Start your day on the dashboard by quickly logging how you feel. A simple click on "Happy," "Neutral," or "Sad" helps you become more aware of your emotional state. Over time, this creates a valuable visual record of your well-being.</p>
                </div>
                <div className="flex-1"><div className="bg-muted w-full h-64 rounded-lg flex items-center justify-center"><BarChart3 className="w-24 h-24 text-muted-foreground/50"/></div></div>
            </div>
            <div className="flex flex-col md:flex-row-reverse items-center gap-8">
                <div className="flex-1 space-y-4">
                    <h2 className="text-3xl font-bold"><span className="text-primary">2.</span> Write in Your Private Journal</h2>
                    <p className="text-muted-foreground">Use the journal to explore your thoughts and feelings in-depth. Write about your day, unpack a stressful event, or celebrate a small win. Your entries are for your eyes only, providing a secure space for honest self-reflection.</p>
                </div>
                <div className="flex-1"><div className="bg-muted w-full h-64 rounded-lg flex items-center justify-center"><BookUser className="w-24 h-24 text-muted-foreground/50"/></div></div>
            </div>
            <div className="flex flex-col md:flex-row items-center gap-8">
                <div className="flex-1 space-y-4">
                    <h2 className="text-3xl font-bold"><span className="text-primary">3.</span> Connect with the Community</h2>
                    <p className="text-muted-foreground">When you're ready, join the anonymous community forums. Share your experiences, ask for advice, or simply offer support to a fellow student. It's a place to remember you're not alone, with your identity always protected.</p>
                </div>
                <div className="flex-1"><div className="bg-muted w-full h-64 rounded-lg flex items-center justify-center"><Users className="w-24 h-24 text-muted-foreground/50"/></div></div>
            </div>
        </div>
    </div>
);

const LoginPage = () => {
    const navigate = useNavigate();
    const handleLogin = (e) => {
        e.preventDefault();
        // Mock login
        toast.success("Logged in successfully!");
        navigate('/app/dashboard');
    }
    return (
        <div className="container flex items-center justify-center py-24">
            <Card className="w-full max-w-sm">
                <CardHeader>
                    <CardTitle className="text-2xl">Login</CardTitle>
                    <CardDescription>Enter your email below to login to your account.</CardDescription>
                </CardHeader>
                <form onSubmit={handleLogin}>
                    <CardContent className="grid gap-4">
                        <div className="grid gap-2">
                            <Label htmlFor="email">Email</Label>
                            <Input id="email" type="email" placeholder="m@example.com" required />
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="password">Password</Label>
                            <Input id="password" type="password" required />
                        </div>
                    </CardContent>
                    <CardFooter>
                        <Button type="submit" className="w-full">Sign in</Button>
                    </CardFooter>
                </form>
            </Card>
        </div>
    );
};

const SignUpPage = () => {
    const navigate = useNavigate();
    const handleSignUp = (e) => {
        e.preventDefault();
        // Mock signup
        toast.success("Account created successfully!");
        navigate('/app/dashboard');
    }
    return (
        <div className="container flex items-center justify-center py-24">
            <Card className="w-full max-w-sm">
                <CardHeader>
                    <CardTitle className="text-2xl">Sign Up</CardTitle>
                    <CardDescription>Create an account to get started.</CardDescription>
                </CardHeader>
                <form onSubmit={handleSignUp}>
                    <CardContent className="grid gap-4">
                        <div className="grid gap-2">
                            <Label htmlFor="email">Email</Label>
                            <Input id="email" type="email" placeholder="m@example.com" required />
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="password">Password</Label>
                            <Input id="password" type="password" required />
                        </div>
                        <div className="grid gap-2">
                            <Label htmlFor="confirm-password">Confirm Password</Label>
                            <Input id="confirm-password" type="password" required />
                        </div>
                    </CardContent>
                    <CardFooter>
                        <Button type="submit" className="w-full">Create Account</Button>
                    </CardFooter>
                </form>
            </Card>
        </div>
    );
};


// PRIVATE APP PAGES & COMPONENTS
// =================================================================================

// --- Dashboard ---
const DashboardPage = () => {
    const navigate = useNavigate();
    const { logMood } = useMood();
    
    return (
        <>
            <h1 className="text-3xl font-bold">Dashboard</h1>
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                <Card>
                    <CardHeader className="flex flex-row items-center justify-between pb-2">
                        <CardTitle className="text-sm font-medium">How are you feeling?</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="flex space-x-2">
                            <Button variant="outline" size="icon" onClick={() => logMood(3)}><Smile className="h-4 w-4 text-green-500"/></Button>
                            <Button variant="outline" size="icon" onClick={() => logMood(2)}><Meh className="h-4 w-4 text-yellow-500"/></Button>
                            <Button variant="outline" size="icon" onClick={() => logMood(1)}><Frown className="h-4 w-4 text-red-500"/></Button>
                        </div>
                        <p className="text-xs text-muted-foreground mt-2">Log your mood for today.</p>
                    </CardContent>
                </Card>
            </div>
            <div className="grid gap-4 md:grid-cols-2">
                <Card className="flex flex-col">
                    <CardHeader>
                        <CardTitle>Private Journal</CardTitle>
                        <CardDescription>Reflect on your day. Your thoughts are safe here.</CardDescription>
                    </CardHeader>
                    <CardFooter className="mt-auto">
                        <Button onClick={() => navigate('/app/journal')}>Go to Journal</Button>
                    </CardFooter>
                </Card>
                <Card className="flex flex-col">
                    <CardHeader>
                        <CardTitle>Anonymous Community</CardTitle>
                        <CardDescription>Connect with peers who understand. Share and support.</CardDescription>
                    </CardHeader>
                    <CardFooter className="mt-auto">
                        <Button onClick={() => navigate('/app/community')}>Visit Community</Button>
                    </CardFooter>
                </Card>
            </div>
        </>
    );
};

// --- Journal ---
const JournalEntryCard = ({ entry, onSelect, onDelete, onEdit }) => (
    <Card>
        <CardHeader>
            <div className="flex justify-between items-start">
                <div>
                    <CardTitle>{entry.title}</CardTitle>
                    <CardDescription>{entry.date}</CardDescription>
                </div>
                <DropdownMenu trigger={<Button variant="ghost" size="icon"><MoreHorizontal className="h-4 w-4"/></Button>}>
                    <DropdownMenuItem onClick={() => onEdit(entry)}><Edit className="mr-2 h-4 w-4"/>Edit</DropdownMenuItem>
                    <DropdownMenuItem onClick={() => onDelete(entry.id)} className="text-destructive"><Trash2 className="mr-2 h-4 w-4"/>Delete</DropdownMenuItem>
                </DropdownMenu>
            </div>
        </CardHeader>
        <CardContent>
            <p className="text-muted-foreground line-clamp-3">{entry.content}</p>
        </CardContent>
        <CardFooter>
            <Button variant="link" className="p-0 h-auto" onClick={() => onSelect(entry)}>Read More</Button>
        </CardFooter>
    </Card>
);

const NewEntrySheet = ({ open, onOpenChange, onSave, entryToEdit }) => {
    const [title, setTitle] = useState('');
    const [content, setContent] = useState('');
    const [mood, setMood] = useState('Neutral');

    useEffect(() => {
        if (entryToEdit) {
            setTitle(entryToEdit.title);
            setContent(entryToEdit.content);
            setMood(entryToEdit.mood);
        } else {
            setTitle('');
            setContent('');
            setMood('Neutral');
        }
    }, [entryToEdit]);

    const handleSave = () => {
        if (!title || !content) {
            toast.error("Title and content cannot be empty.");
            return;
        }
        onSave({ id: entryToEdit?.id || Date.now(), title, content, mood, date: new Date().toISOString().split('T')[0] });
        onOpenChange(false);
    };

    return (
        <Sheet open={open} onOpenChange={onOpenChange}>
            <div className="p-6 h-full flex flex-col">
                <div className="flex items-center justify-between">
                    <h2 className="text-lg font-semibold">{entryToEdit ? 'Edit Entry' : 'New Journal Entry'}</h2>
                    <Button variant="ghost" size="icon" onClick={() => onOpenChange(false)}><X className="h-4 w-4"/></Button>
                </div>
                <div className="flex-1 mt-4 space-y-4">
                    <div>
                        <Label htmlFor="title">Title</Label>
                        <Input id="title" value={title} onChange={e => setTitle(e.target.value)} />
                    </div>
                    <div>
                        <Label htmlFor="content">Content</Label>
                        <Textarea id="content" value={content} onChange={e => setContent(e.target.value)} className="h-48" />
                    </div>
                    <div>
                        <Label>Mood</Label>
                        <div className="flex space-x-2 mt-2">
                            {['Happy', 'Neutral', 'Sad'].map(m => (
                                <Button key={m} variant={mood === m ? 'default' : 'outline'} onClick={() => setMood(m)}>{m}</Button>
                            ))}
                        </div>
                    </div>
                </div>
                <div className="mt-auto">
                    <Button onClick={handleSave} className="w-full">Save Entry</Button>
                </div>
            </div>
        </Sheet>
    );
};

const ViewEntryDialog = ({ open, onOpenChange, entry }) => {
    if (!entry) return null;
    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <div className="space-y-4">
                <h2 className="text-2xl font-bold">{entry.title}</h2>
                <p className="text-sm text-muted-foreground">{entry.date} - Mood: {entry.mood}</p>
                <div className="prose dark:prose-invert max-h-[60vh] overflow-y-auto">
                    <p>{entry.content}</p>
                </div>
                 <div className="flex justify-end">
                    <Button onClick={() => onOpenChange(false)}>Close</Button>
                </div>
            </div>
        </Dialog>
    );
};

const JournalPage = () => {
    const [entries, setEntries] = useState(initialJournalEntries);
    const [selectedEntry, setSelectedEntry] = useState(null);
    const [entryToEdit, setEntryToEdit] = useState(null);
    const [entryToDeleteId, setEntryToDeleteId] = useState(null);
    const [isNewEntrySheetOpen, setIsNewEntrySheetOpen] = useState(false);
    const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
    
    const handleSaveEntry = (entry) => {
        if (entryToEdit) {
            setEntries(entries.map(e => e.id === entry.id ? entry : e));
            toast.success("Entry updated successfully!");
        } else {
            setEntries([entry, ...entries]);
            toast.success("Entry created successfully!");
        }
        setEntryToEdit(null);
    };

    const handleDeleteEntry = (id) => {
        setEntries(entries.filter(e => e.id !== id));
        toast.success("Entry deleted.");
        setEntryToDeleteId(null);
    };
    
    const handleSelectEntry = (entry) => {
        setSelectedEntry(entry);
        setIsViewDialogOpen(true);
    };

    const handleEditEntry = (entry) => {
        setEntryToEdit(entry);
        setIsNewEntrySheetOpen(true);
    };

    const openNewEntrySheet = () => {
        setEntryToEdit(null);
        setIsNewEntrySheetOpen(true);
    };

    return (
        <>
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">My Journal</h1>
                <Button onClick={openNewEntrySheet}><Plus className="mr-2 h-4 w-4"/> New Entry</Button>
            </div>
            <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
                {entries.map(entry => (
                    <JournalEntryCard 
                        key={entry.id} 
                        entry={entry}
                        onSelect={handleSelectEntry}
                        onDelete={() => setEntryToDeleteId(entry.id)}
                        onEdit={handleEditEntry}
                    />
                ))}
            </div>
            {entries.length === 0 && (
                <div className="text-center py-16 border-2 border-dashed rounded-lg">
                    <p className="text-muted-foreground">You have no journal entries yet.</p>
                    <Button variant="link" onClick={openNewEntrySheet}>Create your first entry</Button>
                </div>
            )}

            <NewEntrySheet 
                open={isNewEntrySheetOpen} 
                onOpenChange={setIsNewEntrySheetOpen}
                onSave={handleSaveEntry}
                entryToEdit={entryToEdit}
            />
            <ViewEntryDialog 
                open={isViewDialogOpen} 
                onOpenChange={setIsViewDialogOpen}
                entry={selectedEntry}
            />
            <AlertDialog
                open={!!entryToDeleteId}
                onOpenChange={() => setEntryToDeleteId(null)}
                title="Are you sure?"
                description="This action cannot be undone. This will permanently delete your journal entry."
                onConfirm={() => handleDeleteEntry(entryToDeleteId)}
            />
        </>
    );
};

// --- Community ---
const NewPostDialog = ({ open, onOpenChange, onPost, channel }) => {
    const [content, setContent] = useState('');
    
    const handlePost = () => {
        if (!content) {
            toast.error("Post content cannot be empty.");
            return;
        }
        onPost(content);
        setContent('');
        onOpenChange(false);
    };

    return (
        <Dialog open={open} onOpenChange={onOpenChange}>
            <div className="space-y-4">
                <h2 className="text-lg font-semibold">New Post in #{channel}</h2>
                <Textarea 
                    placeholder="Share what's on your mind... (you are posting anonymously)"
                    value={content}
                    onChange={e => setContent(e.target.value)}
                    className="h-32"
                />
                <div className="flex justify-end">
                    <Button onClick={handlePost}>Post Anonymously</Button>
                </div>
            </div>
        </Dialog>
    );
};

const PostCommentsSheet = ({ open, onOpenChange, post, onAddComment }) => {
    const [newComment, setNewComment] = useState('');

    if (!post) return null;

    const handleAddComment = () => {
        if (!newComment) return;
        onAddComment(post.id, newComment);
        setNewComment('');
    };

    return (
        <Sheet open={open} onOpenChange={onOpenChange}>
            <div className="p-6 h-full flex flex-col">
                <div className="flex items-center justify-between">
                    <h2 className="text-lg font-semibold">Comments</h2>
                    <Button variant="ghost" size="icon" onClick={() => onOpenChange(false)}><X className="h-4 w-4"/></Button>
                </div>
                <div className="mt-4 border-b pb-4">
                    <p className="font-semibold">{post.author}</p>
                    <p>{post.content}</p>
                </div>
                <div className="flex-1 mt-4 space-y-4 overflow-y-auto">
                    {post.comments.map((comment, index) => (
                        <div key={index} className="bg-muted p-3 rounded-lg">
                            <p className="font-semibold text-sm">{comment.author}</p>
                            <p className="text-sm">{comment.content}</p>
                        </div>
                    ))}
                    {post.comments.length === 0 && <p className="text-sm text-muted-foreground">No comments yet.</p>}
                </div>
                <div className="mt-auto pt-4 border-t">
                    <div className="flex gap-2">
                        <Input 
                            placeholder="Add a comment..." 
                            value={newComment}
                            onChange={e => setNewComment(e.target.value)}
                        />
                        <Button onClick={handleAddComment}>Reply</Button>
                    </div>
                </div>
            </div>
        </Sheet>
    );
};

const CommunityPage = () => {
    const [posts, setPosts] = useState(initialCommunityPosts);
    const [activeChannel, setActiveChannel] = useState('general-chat');
    const [isNewPostDialogOpen, setIsNewPostDialogOpen] = useState(false);
    const [selectedPost, setSelectedPost] = useState(null);
    const [isCommentsSheetOpen, setIsCommentsSheetOpen] = useState(false);
    
    const randomAuthors = ["Anonymous Fox", "Anonymous Bear", "Anonymous Owl", "Anonymous Capybara", "Anonymous Turtle", "Anonymous Rabbit"];
    const getRandomAuthor = () => randomAuthors[Math.floor(Math.random() * randomAuthors.length)];

    const handlePost = (content) => {
        const newPost = {
            id: Date.now(),
            author: getRandomAuthor(),
            content,
            likes: 0,
            comments: [],
        };
        setPosts(prev => ({
            ...prev,
            [activeChannel]: [newPost, ...prev[activeChannel]],
        }));
        toast.success("Posted anonymously!");
    };

    const handleLike = (postId) => {
        setPosts(prev => ({
            ...prev,
            [activeChannel]: prev[activeChannel].map(p => p.id === postId ? { ...p, likes: p.likes + 1 } : p),
        }));
    };

    const handleAddComment = (postId, commentContent) => {
        const newComment = { author: getRandomAuthor(), content: commentContent };
        const updatedPosts = posts[activeChannel].map(p => 
            p.id === postId ? { ...p, comments: [...p.comments, newComment] } : p
        );
        setPosts(prev => ({
            ...prev,
            [activeChannel]: updatedPosts
        }));
        // Also update the selected post to show new comment immediately
        setSelectedPost(prev => ({...prev, comments: [...prev.comments, newComment]}));
        toast.success("Comment added!");
    };

    const openComments = (post) => {
        setSelectedPost(post);
        setIsCommentsSheetOpen(true);
    };

    return (
        <>
            <div className="flex items-center justify-between">
                <h1 className="text-3xl font-bold">Community</h1>
                <Button onClick={() => setIsNewPostDialogOpen(true)}><Plus className="mr-2 h-4 w-4"/> New Post</Button>
            </div>
            <Tabs defaultValue="general-chat" onValueChange={setActiveChannel}>
                <TabsList>
                    <TabsTrigger value="general-chat">General Chat</TabsTrigger>
                    <TabsTrigger value="exam-stress">Exam Stress</TabsTrigger>
                    <TabsTrigger value="campus-life">Campus Life</TabsTrigger>
                </TabsList>
                <TabsContent value={activeChannel}>
                    <div className="space-y-4">
                        {posts[activeChannel].map(post => (
                            <Card key={post.id}>
                                <CardHeader>
                                    <p className="font-semibold">{post.author}</p>
                                </CardHeader>
                                <CardContent>
                                    <p>{post.content}</p>
                                </CardContent>
                                <CardFooter className="space-x-4">
                                    <Button variant="ghost" size="sm" onClick={() => handleLike(post.id)}>
                                        <Heart className="mr-2 h-4 w-4" fill={post.likes > 0 ? 'currentColor' : 'none'}/> {post.likes}
                                    </Button>
                                    <Button variant="ghost" size="sm" onClick={() => openComments(post)}>
                                        <MessageSquare className="mr-2 h-4 w-4"/> {post.comments.length} Comments
                                    </Button>
                                </CardFooter>
                            </Card>
                        ))}
                         {posts[activeChannel].length === 0 && (
                            <div className="text-center py-16 border-2 border-dashed rounded-lg">
                                <p className="text-muted-foreground">No posts in this channel yet.</p>
                                <Button variant="link" onClick={() => setIsNewPostDialogOpen(true)}>Be the first to post</Button>
                            </div>
                        )}
                    </div>
                </TabsContent>
            </Tabs>
            <NewPostDialog 
                open={isNewPostDialogOpen}
                onOpenChange={setIsNewPostDialogOpen}
                onPost={handlePost}
                channel={activeChannel}
            />
            <PostCommentsSheet
                open={isCommentsSheetOpen}
                onOpenChange={setIsCommentsSheetOpen}
                post={selectedPost}
                onAddComment={handleAddComment}
            />
        </>
    );
};

// --- Insights ---
const MoodChart = ({ data }) => {
    return (
        <ResponsiveContainer width="100%" height={300}>
            <LineChart data={data} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="name" />
                <YAxis domain={[0, 4]} ticks={[1, 2, 3]} tickFormatter={(value) => ['Sad', 'Neutral', 'Happy'][value-1]}/>
                <Tooltip formatter={(value) => ['Sad', 'Neutral', 'Happy'][value-1]} />
                <Legend />
                <Line type="monotone" dataKey="mood" stroke="#8884d8" activeDot={{ r: 8 }} />
            </LineChart>
        </ResponsiveContainer>
    );
};

const InsightsPage = () => {
    const { moodStats, chartData } = useMood();
    return (
        <>
            <h1 className="text-3xl font-bold">My Insights</h1>
            <div className="grid gap-4 md:grid-cols-3">
                <Card>
                    <CardHeader><CardTitle>Average Mood</CardTitle></CardHeader>
                    <CardContent><p className="text-2xl font-bold">{moodStats.avg}</p></CardContent>
                </Card>
                <Card>
                    <CardHeader><CardTitle>Most Frequent</CardTitle></CardHeader>
                    <CardContent><p className="text-2xl font-bold">{moodStats.mostFrequent}</p></CardContent>
                </Card>
                <Card>
                    <CardHeader><CardTitle>Positive Streak</CardTitle></CardHeader>
                    <CardContent><p className="text-2xl font-bold">{moodStats.streak} Days</p></CardContent>
                </Card>
            </div>
            <Card>
                <CardHeader>
                    <CardTitle>Mood Trend</CardTitle>
                    <CardDescription>Your mood log over the last entries.</CardDescription>
                </CardHeader>
                <CardContent>
                    <MoodChart data={chartData} />
                </CardContent>
            </Card>
        </>
    );
};

// --- Settings ---
const SettingsPage = () => {
    const { theme, setTheme } = useContext(ThemeContext);
    
    return (
        <>
            <h1 className="text-3xl font-bold">Settings</h1>
            <Card>
                <CardHeader><CardTitle>Appearance</CardTitle></CardHeader>
                <CardContent>
                    <div className="space-y-2">
                        <Label>Theme</Label>
                        <p className="text-sm text-muted-foreground">Select the theme for the application.</p>
                        <div className="flex space-x-2">
                            <Button variant={theme === 'light' ? 'default' : 'outline'} onClick={() => setTheme('light')}><Sun className="mr-2 h-4 w-4"/>Light</Button>
                            <Button variant={theme === 'dark' ? 'default' : 'outline'} onClick={() => setTheme('dark')}><Moon className="mr-2 h-4 w-4"/>Dark</Button>
                            <Button variant={theme === 'system' ? 'default' : 'outline'} onClick={() => setTheme('system')}><Laptop className="mr-2 h-4 w-4"/>System</Button>
                        </div>
                    </div>
                </CardContent>
            </Card>
            <Card>
                <CardHeader><CardTitle>Notifications</CardTitle></CardHeader>
                <CardContent>
                    <p className="text-muted-foreground">Mock settings for notifications.</p>
                </CardContent>
            </Card>
            <Card>
                <CardHeader><CardTitle className="text-destructive">Delete Account</CardTitle></CardHeader>
                <CardContent>
                    <p className="text-sm text-muted-foreground mb-4">Permanently delete your account and all of your content. This action is not reversible.</p>
                    <Button variant="destructive">Delete My Account</Button>
                </CardContent>
            </Card>
        </>
    );
};


// MAIN APP COMPONENT
// =================================================================================

function App() {
  return (
    <ThemeProvider>
        <MoodProvider>
            <HashRouter>
                <Toaster richColors />
                <Routes>
                    <Route path="/" element={<PublicLayout />}>
                        <Route index element={<HomePage />} />
                        <Route path="about" element={<AboutPage />} />
                        <Route path="how-it-works" element={<HowItWorksPage />} />
                        <Route path="login" element={<LoginPage />} />
                        <Route path="signup" element={<SignUpPage />} />
                    </Route>
                    <Route path="/app" element={<AppLayout />}>
                        <Route path="dashboard" element={<DashboardPage />} />
                        <Route path="journal" element={<JournalPage />} />
                        <Route path="community" element={<CommunityPage />} />
                        <Route path="insights" element={<InsightsPage />} />
                        <Route path="settings" element={<SettingsPage />} />
                    </Route>
                </Routes>
            </HashRouter>
        </MoodProvider>
    </ThemeProvider>
  );
}

export default App;
